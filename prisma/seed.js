const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function main() {
    console.log('üå± Seeding database...');

    // 1. T·∫°o 4 ng√†nh
    const departments = await Promise.all([
        prisma.department.create({
            data: {
                name: 'CHIEN',
                displayName: 'Chi√™n',
                description: 'Ng√†nh Chi√™n (6-8 tu·ªïi)'
            }
        }),
        prisma.department.create({
            data: {
                name: 'AU',
                displayName: '·∫§u',
                description: 'Ng√†nh ·∫§u (9-11 tu·ªïi)'
            }
        }),
        prisma.department.create({
            data: {
                name: 'THIEU',
                displayName: 'Thi·∫øu',
                description: 'Ng√†nh Thi·∫øu (12-14 tu·ªïi)'
            }
        }),
        prisma.department.create({
            data: {
                name: 'NGHIA',
                displayName: 'Nghƒ©a',
                description: 'Ng√†nh Nghƒ©a (15-17 tu·ªïi)'
            }
        })
    ]);

    console.log('‚úÖ Created departments:', departments.map(d => d.displayName));

    // 2. T·∫°o user Ban ƒëi·ªÅu h√†nh
    const adminUser = await prisma.user.create({
        data: {
            username: 'admin',
            passwordHash: await bcrypt.hash('admin123', 10),
            role: 'ban_dieu_hanh',
            saintName: 'Ph√™r√¥',
            fullName: 'Tr·∫ßn Th√†nh Trung',
            phoneNumber: '0901234567',
            address: 'TP.HCM'
        }
    });

    console.log('‚úÖ Created admin user:', adminUser.fullName);

    // 3. T·∫°o Ph√¢n ƒëo√†n tr∆∞·ªüng cho t·ª´ng ng√†nh
    const phanDoanTruongs = await Promise.all(
        departments.map(async (dept, index) => {
            return prisma.user.create({
                data: {
                    username: `pdt_${dept.name.toLowerCase()}`,
                    passwordHash: await bcrypt.hash('123456', 10),
                    role: 'phan_doan_truong',
                    saintName: ['Maria', 'Giuse', 'Anna', 'Phao-l√¥'][index],
                    fullName: `Ph√¢n ƒêo√†n Tr∆∞·ªüng ${dept.displayName}`,
                    departmentId: dept.id,
                    phoneNumber: `090123456${index}`,
                    address: 'TP.HCM'
                }
            });
        })
    );

    console.log('‚úÖ Created ph√¢n ƒëo√†n tr∆∞·ªüng:', phanDoanTruongs.map(p => p.fullName));

    // 4. T·∫°o l·ªõp cho t·ª´ng ng√†nh
    const classes = [];
    for (const dept of departments) {
        for (let i = 1; i <= 3; i++) {
            const classData = await prisma.class.create({
                data: {
                    name: `${dept.displayName} ${i}`,
                    departmentId: dept.id
                }
            });
            classes.push(classData);
        }
    }

    console.log('‚úÖ Created classes:', classes.map(c => c.name));

    // 5. T·∫°o gi√°o l√Ω vi√™n cho t·ª´ng l·ªõp
    const teachers = await Promise.all(
        classes.map(async (cls, index) => {
            const teacher = await prisma.user.create({
                data: {
                    username: `glv_${cls.name.toLowerCase().replace(/\s/g, '_')}`,
                    passwordHash: await bcrypt.hash('123456', 10),
                    role: 'giao_ly_vien',
                    saintName: ['Teresa', 'Th√™r√™sa', 'Ant√¥n', 'Phanxic√¥', 'Rosa', 'Lucia', 'Bernadette', 'Rita', 'Cecilia', 'Agnes', 'Monica', 'Clara'][index] || 'Maria',
                    fullName: `Gi√°o l√Ω vi√™n ${cls.name}`,
                    phoneNumber: `091234567${index.toString().padStart(2, '0')}`,
                    address: 'TP.HCM'
                }
            });

            // G√°n gi√°o vi√™n l√†m gi√°o vi√™n ch√≠nh c·ªßa l·ªõp
            await prisma.classTeacher.create({
                data: {
                    classId: cls.id,
                    userId: teacher.id,
                    isPrimary: true
                }
            });

            return teacher;
        })
    );

    console.log('‚úÖ Created teachers:', teachers.map(t => t.fullName));

    // 6. T·∫°o h·ªçc sinh m·∫´u
    let studentCount = 1;
    for (const cls of classes) {
        for (let i = 1; i <= 5; i++) {
            await prisma.student.create({
                data: {
                    studentCode: `TN${studentCount.toString().padStart(4, '0')}`,
                    qrCode: `QR${studentCount.toString().padStart(4, '0')}`,
                    saintName: ['Anna', 'Maria', 'Giuse', 'Phao-l√¥', 'Teresa'][i - 1],
                    fullName: `H·ªçc sinh ${studentCount} - ${cls.name}`,
                    birthDate: new Date(2010 + Math.floor(Math.random() * 8), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
                    phoneNumber: `092345678${(studentCount % 10)}`,
                    parentPhone1: `093456789${(studentCount % 10)}`,
                    parentPhone2: `094567890${(studentCount % 10)}`,
                    address: `ƒê·ªãa ch·ªâ h·ªçc sinh ${studentCount}`,
                    classId: cls.id
                }
            });
            studentCount++;
        }
    }

    console.log(`‚úÖ Created ${studentCount - 1} students`);

    console.log('üéâ Seed completed successfully!');
    console.log('\nüìã Login credentials:');
    console.log('Admin: admin / admin123');
    console.log('Ph√¢n ƒëo√†n tr∆∞·ªüng: pdt_chien / 123456 (t∆∞∆°ng t·ª± cho au, thieu, nghia)');
    console.log('Gi√°o l√Ω vi√™n: glv_chien_1 / 123456 (t∆∞∆°ng t·ª± cho c√°c l·ªõp kh√°c)');
}

main()
    .catch((e) => {
        console.error('‚ùå Seed failed:', e);
        process.exit(1);
    })
    .finally(async () => {
        await prisma.$disconnect();
    });